#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle post-init-non-evil.el
#+auto_tangle: t

* Introduction

  This file will generate a post-init.el file. This should be loaded from init.el with ~(load-file "path-to-post-init.el")~

* Auto-Tangle

  Sets up Auto tangle on save

#+BEGIN_SRC emacs-lisp

  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))

#+END_SRC

* Backups

  Change the backup handling to write to a specific directory to stop polluting git directories

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t
      backup-directory-alist
      '(("." . "~/.emacs-backups/"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
#+END_SRC

* Basic UI Configuration

  Sets up the basic UI configuration with no dependency on external packages.

** Frame Decoration

   We don't use the scroll-bar or tool-bar so remove those always

#+BEGIN_SRC emacs-lisp

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

#+END_SRC

** Tab Bar Mode

#+BEGIN_SRC emacs-lisp

  (tab-bar-mode 1)
  (tab-bar-history-mode 1)

#+END_SRC

** Location Identification

   Always highlight the current line.
   Show column number in status bar.
   Show line numbers except in terminal modes

#+BEGIN_SRC emacs-lisp

  (global-hl-line-mode +1)

  (column-number-mode)

  (global-display-line-numbers-mode t)
      (dolist (mode '(term-mode-hook
		    shell-mode-hook
		    eshell-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+END_SRC

** Trailing Whitespace

   Delete trailing whitespace for programming modes

#+BEGIN_SRC emacs-lisp

  (add-hook 'prog-mode-hook
	  (lambda ()
	   (add-hook 'before-save-hook 'delete-trailing-whitespace)))

#+END_SRC

** Show Parens
   Highlight the matching paren on closing paren.

#+BEGIN_SRC emacs-lisp

  (show-paren-mode 1)

#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Source Code Pro" :height 140)
#+END_SRC

* Package Management

  This sets up package management repositories and tools

** Basic Package Setup

   - melpa for the latest
   - org for the latest org-mode content
   - melpa-stable as a fallback

#+BEGIN_SRC emacs-lisp

  (require 'package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/pacakges/") t)

  (package-initialize)

  (unless package-archive-contents
   (package-refresh-contents))
  (package-install-selected-packages)

#+END_SRC

** use-package Setup

Setup use-package which allows for cleaner specification of pacakges and package configuration

#+BEGIN_SRC emacs-lisp

  (unless (package-installed-p 'use-package)
   (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp

    (use-package gruvbox-theme
     :config (load-theme 'gruvbox-dark-medium t))

#+END_SRC

* Modeline setup

Use Doom-modeline for modeline (all-the-icons is a dependency)

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+END_SRC

* Which-Key Setup

which-key is a very useful tool for indicating what actions keys will do in various contexts.

#+BEGIN_SRC emacs-lisp

  (use-package which-key
   :custom (which-key-idle-delay 0.3)
   :config (which-key-mode))

#+END_SRC

* General-Def

** Initial Setup

General provides smarter key-bind setup.

#+BEGIN_SRC emacs-lisp

  (use-package general
   :demand
   :config
   (general-create-definer personal/leader-key
    :keymaps 'override
    :prefix "S-SPC")
   (general-create-definer personal/refactor
    :keymaps 'override
    :prefix "M-RET"))

 #+END_SRC

* Help

** Helpful

[[https://github.com/Wilfred/helpful][helpful]] is a package that provides a more helpful help

#+BEGIN_SRC emacs-lisp

  (use-package helpful
    :general
    ("C-h f" #'helpful-callable)
    ("C-h v" #'helpful-variable)
    ("C-h k" #'helpful-key))

#+END_SRC

* File Browsing

** Treemacs Setup

*** Initial Setup

Use Treemacs as a kind of explorer like in vscode

#+BEGIN_SRC emacs-lisp

  (use-package treemacs)

#+END_SRC

* Org Mode

** Basic Setup

#+BEGIN_SRC emacs-lisp

    (use-package org
      :custom (org-ellipsis " âž¤")
      (org-log-done 'time)
      (org-agenda-start-with-log-mode t)
      (org-duration-format (quote h:mm)))

#+END_SRC

** Org Bullets

#+BEGIN_SRC emacs-lisp

  (use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))

#+END_SRC

* Git Integration

** Magit

Magit is the main git client being used

#+BEGIN_SRC emacs-lisp

  (use-package magit
   :custom (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))

#+END_SRC

Treemacs support

#+BEGIN_SRC emacs-lisp

  (use-package treemacs-magit)

#+END_SRC

PR support

#+BEGIN_SRC emacs-lisp

  (use-package forge :after magit)

#+END_SRC

Gitflow

#+BEGIN_SRC emacs-lisp

  (use-package magit-gitflow
    :hook 'magit-mode-hook (turn-on-magit-gitflow))

#+END_SRC

Show TODOs on Status

#+BEGIN_SRC emacs-lisp

  (use-package magit-todos
    :after magit
    :config (magit-todos-mode t))

#+END_SRC

** Keybinds

#+BEGIN_SRC emacs-lisp

  (personal/leader-key
   "g" '(:ignore t :which-key "git")
   "gs" 'magit-status)

#+END_SRC

* Search/Find

** Emacs

#+BEGIN_SRC emacs-lisp

  (use-package emacs
    :custom
    (isearch-wrap-pause 'no-ding "Disable the pause and the ding when search wraps around"))

#+END_SRC

** Avy

Avy is a quick-jump tool that works across buffers

#+BEGIN_SRC emacs-lisp

  (use-package avy)

#+END_SRC

** Idle Highlight Mode

#+BEGIN_SRC emacs-lisp

  (use-package idle-highlight-mode
    :hook (prog-mode . idle-highlight-mode))

#+END_SRC

** SaveHist

[[https://www.emacswiki.org/emacs/SaveHist][savehist]] remembers minibuffer entries between sessions.
This is useful for tools like Vertico which sort based on this history

#+BEGIN_SRC emacs-lisp

  (use-package savehist
    :init
    (savehist-mode))

#+END_SRC

** Vertico

[[https://github.com/minad/vertico][Vertico]] Provides a vertical completion UI for emacs which is designed to work consistently in all situations

#+BEGIN_SRC emacs-lisp

  (use-package vertico
    :init
    (vertico-mode)
    :custom
    (vertico-cycle t "Vertico list cycles at the end")
    (read-extended-command-predicate #'command-completion-default-include-p "Hide commands not valid for the current mode")
    (enable-recursive-minibuffers t "Minibuffers can use minibuffers"))

#+END_SRC

** Marginalia

[[https://github.com/minad/marginalia][marginalia]] enriches the minibuffer with extra details

#+BEGIN_SRC emacs-lisp

  (use-package marginalia
    :init
    (marginalia-mode))

#+END_SRC

** Orderless

[[https://github.com/oantolin/orderless][orderless]] makes matches in completions more flexible to allow for matching on multiple parts of the string

#+BEGIN_SRC emacs-lisp

  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

#+END_SRC

** Corfu

[[https://github.com/minad/corfu][Corfu]] provides improvements to in-buffer completions

#+BEGIN_SRC emacs-lisp

  (use-package corfu
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-separator ?\s)
    :init
    (global-corfu-mode))

#+END_SRC

** Kind-Icon

[[https://github.com/jdtsmith/kind-icon][kind-icon]] shows icons in auto-completion frameworks where available

#+BEGIN_SRC emacs-lisp

  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

#+END_SRC

** Consult

For now using the example keybindings from the github.com page

#+BEGIN_SRC emacs-lisp

  (use-package consult
    :bind (;; C-c bindings (mode-specific-map)
	 ("C-c h" . consult-history)
	 ("C-c m" . consult-mode-command)
	 ("C-c k" . consult-kmacro)
	 ;; C-x bindings (ctl-x-map)
	 ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	 ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	 ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	 ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	 ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	 ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	 ;; Custom M-# bindings for fast register access
	 ("M-#" . consult-register-load)
	 ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	 ("C-M-#" . consult-register)
	 ;; Other custom bindings
	 ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	 ("<help> a" . consult-apropos)            ;; orig. apropos-command
	 ;; M-g bindings (goto-map)
	 ("M-g e" . consult-compile-error)
	 ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	 ("M-g g" . consult-goto-line)             ;; orig. goto-line
	 ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	 ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	 ("M-g m" . consult-mark)
	 ("M-g k" . consult-global-mark)
	 ("M-g i" . consult-imenu)
	 ("M-g I" . consult-imenu-multi)
	 ;; M-s bindings (search-map)
	 ("M-s d" . consult-find)
	 ("M-s D" . consult-locate)
	 ("M-s g" . consult-grep)
	 ("M-s G" . consult-git-grep)
	 ("M-s r" . consult-ripgrep)
	 ("M-s l" . consult-line)
	 ("M-s L" . consult-line-multi)
	 ("M-s m" . consult-multi-occur)
	 ("M-s k" . consult-keep-lines)
	 ("M-s u" . consult-focus-lines)
	 ;; Isearch integration
	 ("M-s e" . consult-isearch-history)
	 :map isearch-mode-map
	 ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	 ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	 ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	 ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	 ;; Minibuffer history
	 :map minibuffer-local-map
	 ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	 ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
	register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
	xref-show-definitions-function #'consult-xref))

#+END_SRC

** Embark

[[https://github.com/oantolin/embark][embark]] offers contextual actions from hotkey

#+BEGIN_SRC emacs-lisp

  (use-package embark
    :general
    ("C-." #'embark-act)
    ("C-;" #'embark-dwim))

#+END_SRC

** Embark-Consult

#+BEGIN_SRC emacs-lisp

  (use-package embark-consult
    :after (embark consult))

#+END_SRC

** Keybinds

#+BEGIN_SRC emacs-lisp

    (general-def
     "C-'" 'avy-goto-char-timer)

#+END_SRC

* Project Management

** Projectile

Use projectile for project management

#+BEGIN_SRC emacs-lisp

  (use-package projectile
   :demand
   :general ("C-c p" 'projectile-command-map)
   :init (when (file-directory-p "~/D/I")
	   (setq projectile-project-search-path '("~/D/I")))
   :config (projectile-mode +1))

#+END_SRC

Use ripgrep for search

#+BEGIN_SRC emacs-lisp

  (use-package ripgrep :demand)

  (use-package projectile-ripgrep :after projectile ripgrep)

#+END_SRC

Counsel Support

#+BEGIN_SRC emacs-lisp

  (use-package counsel-projectile :after projectile :config (counsel-projectile-mode t))

#+END_SRC

Treemacs support

#+BEGIN_SRC emacs-lisp

  (use-package treemacs-projectile :after projectile)

#+END_SRC

** Project Management Keybinds

#+BEGIN_SRC emacs-lisp

  (personal/leader-key
    "p" 'projectile-command-map
    "ps" '(:ignore t :which-key "search"))

#+END_SRC

* Programming

** Parenthesis Configuration

*** Rainbow-Delimiters

Rainbow Delimiters alternates colours to better show the matched parens

#+BEGIN_SRC emacs-lisp

  (use-package rainbow-delimiters
   :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

*** Structural Editing

Use paredit to ensure that parens cannot be unmatched

#+BEGIN_SRC emacs-lisp

  (use-package paredit
   :hook (prog-mode . enable-paredit-mode))

#+END_SRC

** LSP Setup

Language Server Protocol setup (connects to a running external language server to provide helper functions)

*** Initial setup

#+BEGIN_SRC emacs-lisp

  (use-package lsp-mode
   :init (setq lsp-keymap-prefix "C-C l")
   :custom (lsp-lens-enable t)
   :hook (lsp-mode . lsp-enable-which-key-integration))

#+END_SRC

*** Ivy Support

#+BEGIN_SRC emacs-lisp

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

#+END_SRC

*** Treemacs Support

#+BEGIN_SRC emacs-lisp

  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

#+END_SRC

*** Debugger

#+BEGIN_SRC emacs-lisp

  (use-package dap-mode)

#+END_SRC

** Syntax Checking

*** Flycheck Setup

#+BEGIN_SRC emacs-lisp

  (use-package flycheck)

#+END_SRC

** Snippets

*** Yasnippet Setup

#+BEGIN_SRC emacs-lisp

  (use-package yasnippet
    :config (yas-global-mode 1))

#+END_SRC

*** ivy previews

Depends on dash

#+BEGIN_SRC emacs-lisp

  (use-package dash
    :after yasnippet)

  (use-package ivy-yasnippet
    :after yasnippet dash
    :config 'ivy-yasnippet)

#+END_SRC

** Clojure Support

*** Add Clojure-Mode

#+BEGIN_SRC emacs-lisp

    (use-package clojure-mode
      :config (require 'flycheck-clj-kondo))

#+END_SRC

*** LSP Integration

#+BEGIN_SRC emacs-lisp

  (add-hook 'clojure-mode 'lsp)
  (add-hook 'clojurescript-mode 'lsp)
  (add-hook 'clojurec-mode 'lsp)

#+END_SRC

*** clj-refactor

#+BEGIN_SRC emacs-lisp

  (use-package clj-refactor
    :hook ((clojure-mode . clj-refactor-mode)
	   (clojurec-mode . clj-refactor-mode)
	   (clojurescript-mode . clj-refactor-mode))
   :config (cljr-add-keybindings-with-prefix "M-RET"))

#+END_SRC

*** clj-kondo

#+BEGIN_SRC emacs-lisp

  (use-package flycheck-clj-kondo)

#+END_SRC

*** yasnippet

#+BEGIN_SRC emacs-lisp

  (use-package clojure-snippets
    :after yasnippet clojure-mode)

#+END_SRC

*** Cider Setup

#+BEGIN_SRC emacs-lisp

  (use-package cider
    :commands (cider cider-connect cider-jack-in)
    :custom
    (cider-eval-toplevel-inside-comment-form t)
    (clojure-toplevel-inside-comment-form t))

#+END_SRC

*** Portal Setup

#+BEGIN_SRC emacs-lisp

  ;; Leverage an existing cider nrepl connection to evaluate portal.api functions
;; and map them to convenient key bindings.

;; def portal to the dev namespace to allow dereferencing via @dev/portal
(defun portal.api/open ()
  (interactive)
  (cider-nrepl-sync-request:eval
    "(do (ns dev) (def portal ((requiring-resolve 'portal.api/open))) (add-tap (requiring-resolve 'portal.api/submit)))"))

(defun portal.api/clear ()
  (interactive)
  (cider-nrepl-sync-request:eval "(portal.api/clear)"))

(defun portal.api/close ()
  (interactive)
  (cider-nrepl-sync-request:eval "(portal.api/close)"))

#+END_SRC

*** Clojure Keybinds

#+BEGIN_SRC emacs-lisp

  (personal/leader-key
    "'" '(:ignore t :which-key "cider")
    "'j" '(:ignore t :which-key "jack-in")
    "'jj" 'cider-jack-in-clj
    "'js" 'cider-jack-in-cljs
    "'jc" 'cider-jack-in-clj&cljs

    "s" 'sesman-map

    "l" '(:ignore t :which-key "portal")
    "lo" #'portal.api/open
    "lc" #'portal.api/clear

    "h" '(:ignore t :which-key "doc")
    "hd" 'cider-doc
    "hj" 'cider-javadoc
    "hc" 'cider-clojure-docs
    "ha" 'cider-apropos
    "hA" 'cider-apropos-documentation
    "hw" 'cider-clojuredocs-web
    "hn" 'cider-browse-ns

    "e" '(:ignore t :which-key "eval")
    "ee" 'cider-eval-defun-at-point
    "ef" 'cider-eval-last-sexp
    "eb" 'cider-eval-buffer
    "ec" 'cider-eval-commands-map)

  (general-def "C-<return>" 'cider-eval-defun-at-point)

  (personal/refactor
   "a" '(:ignore t :which-key "add")
   "c" '(:ignore t :which-key "cycle")
   "d" '(:ignore t :which-key "destructure")
   "e" '(:ignore t :which-key "extract/expand")
   "f" '(:ignore t :which-key "function")
   "h" '(:ignore t :which-key "hydra/hotload")
   "i" '(:ignore t :which-key "introduce/inline")
   "m" '(:ignore t :which-key "move")
   "p" '(:ignore t :which-key "project/promote")
   "r" '(:ignore t :which-key "rename/remove")
   "s" '(:ignore t :which-key "sort/stop deps")
   "t" '(:ignore t :which-key "thread")
   "u" '(:ignore t :which-key "unwind"))

#+END_SRC

** Programming Keybinds

#+BEGIN_SRC emacs-lisp

  (personal/leader-key "i" 'ivy-yasnippet)

#+END_SRC

* E-books

** nov.el setup

#+BEGIN_SRC emacs-lisp

    (use-package nov
     :config (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))

#+END_SRC

* Lame Shortcuts

A bunch of non-emacs or vim style shortcuts that are consistent with other software

#+BEGIN_SRC emacs-lisp

  (general-def
   "C-S-f" 'projectile-ripgrep)

#+END_SRC

* Emacs Improvements

Add shortcut for zap-up-to-char similar to zap-to-char

#+BEGIN_SRC emacs-lisp

      (general-def
	"M-Z" 'zap-up-to-char
	"M-i" 'imenu)

#+END_SRC
