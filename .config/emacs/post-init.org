#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle post-init.el

* Introduction

  This file will generate a post-init.el file. This should be loaded from init.el with ~(load-file "path-to-post-init.el")~

* Auto-Tangle

  Sets up Auto tangle on save

#+BEGIN_SRC emacs-lisp

  (defun cwchriswilliams/org-babel-auto-tangle()
    (when (or
	   (string-equal (buffer-file-name)
			 (expand-file-name "~/D/I/arch_config/.config/emacs/post-init.org"))
	   (string-equal (buffer-file-name)
			 (expand-file-name "~/D/I/arch_config/.config/i3/config.org"))
	   (string-equal (buffer-file-name)
			 (expand-file-name "~/D/I/arch_config/.config/rofi/config.org"))
	   (string-equal (buffer-file-name)
			 (expand-file-name "~/D/I/arch_config/usr/share/X11/xorg.conf.d/41-libinput-user.org"))
	   (string-equal (buffer-file-name)
			 (expand-file-name "~/D/I/arch_config/.config/i3blocks/config.org"))
	   )
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'cwchriswilliams/org-babel-auto-tangle)))

#+END_SRC

* Backups

  Change the backup handling to write to a specific directory to stop polluting git directories

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t
      backup-directory-alist
      '(("." . "~/.emacs-backups/"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
#+END_SRC

* Basic UI Configuration

  Sets up the basic UI configuration with no dependency on external packages.

** Frame Decoration

   We don't use the scroll-bar or tool-bar so remove those always

#+BEGIN_SRC emacs-lisp

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

#+END_SRC

** Location Identification

   Always highlight the current line.
   Show column number in status bar.
   Show line numbers except in terminal modes

#+BEGIN_SRC emacs-lisp

  (global-hl-line-mode +1)

  (column-number-mode)

  (global-display-line-numbers-mode t)
      (dolist (mode '(term-mode-hook
		    shell-mode-hook
		    eshell-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+END_SRC

** Trailing Whitespace

   Delete trailing whitespace for programming modes

#+BEGIN_SRC emacs-lisp

  (add-hook 'prog-mode-hook
	  (lambda ()
	   (add-hook 'before-save-hook 'delete-trailing-whitespace)))

#+END_SRC

** Show Parens
   Highlight the matching paren on closing paren.

#+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Source Code Pro" :height 140)
#+END_SRC

* Package Management

  This sets up package management repositories and tools

** Basic Package Setup

   - melpa for the latest
   - org for the latest org-mode content
   - melpa-stable as a fallback

#+BEGIN_SRC emacs-lisp

  (require 'package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/pacakges/") t)

  (package-initialize)

  (unless package-archive-contents
   (package-refresh-contents))
  (package-install-selected-packages)

#+END_SRC

** use-package Setup

Setup use-package which allows for cleaner specification of pacakges and package configuration

#+BEGIN_SRC emacs-lisp

  (unless (package-installed-p 'use-package)
   (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp

    (use-package gruvbox-theme
     :config (load-theme 'gruvbox-dark-medium t))

#+END_SRC

* Modeline setup

Use Doom-modeline for modeline (all-the-icons is a dependency)

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+END_SRC

* Which-Key Setup

which-key is a very useful tool for indicating what actions keys will do in various contexts.

#+BEGIN_SRC emacs-lisp

  (use-package which-key
   :custom (which-key-idle-delay 0.3)
   :config (which-key-mode))

#+END_SRC

* General-Def

** Initial Setup

General provides smarter key-bind setup.
Note that states are required because we're using evil mode.

#+BEGIN_SRC emacs-lisp

  (use-package general
   :demand
   :config
   (general-create-definer personal/leader-key
    :states '(normal visual insert motion)
    :prefix "C-SPC")
   (general-create-definer personal/refactor
    :states '(normal visual insert motion)
    :prefix "M-RET"))

#+END_SRC

* Evil Mode

Enable Evil Mode for vim keybindings

** Basic Evil Mode

NOTE: Evil collection requires evil-want-keybinding to be nil. Putting it here prevents a warning

#+BEGIN_SRC emacs-lisp

  (use-package evil
    :init (setq evil-want-keybinding nil)
    :config (evil-mode 1))

#+END_SRC

** Evil Collection

Evil Collection enables evil bindings in more modes.

NOTE: Requires evil-want-keybinding to be nil

#+BEGIN_SRC emacs-lisp

  (use-package evil-collection
   :after evil
   :config (evil-collection-init))

#+END_SRC

* Git Integration

** Magit

Magit is the main git client being used

#+BEGIN_SRC emacs-lisp

  (use-package magit
   :custom (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))

#+END_SRC

** Keybinds

#+BEGIN_SRC emacs-lisp

  (personal/leader-key
   "g" '(:ignore t :which-key "git")
   "gs" 'magit-status)

#+END_SRC

* Search/Find

** Avy

Avy is a quick-jump tool that works across buffers

#+BEGIN_SRC emacs-lisp

  (use-package avy)

#+END_SRC

** Ivy/Counsel

Ivy/Counsel is the base for a lot of actions, but generally under the category of filtering and searching

*** Initial setup

#+BEGIN_SRC emacs-lisp

  (use-package counsel
  :config (counsel-mode 1)
          (ivy-mode 1))

#+END_SRC

*** Ivy-Rich

ivy-rich enables a more friendly interface to ivy

#+BEGIN_SRC emacs-lisp

  (use-package ivy-rich
  :config (ivy-rich-mode 1))

#+END_SRC

*** Helpful

Helpful is a better help tool for emacs. Bindings for counsel are here.

#+BEGIN_SRC emacs-lisp
    (use-package helpful
    :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable))


#+END_SRC

** Keybinds

#+BEGIN_SRC emacs-lisp

    (general-def '(normal insert visual motion)
     "C-'" 'avy-goto-char-timer
     "C-f" 'swiper
     "C-S-p" 'counsel-M-x
  [remap describe-function] 'counsel-describe-function
  [remap descibe-command] 'helpful-command
  [remap describe-variable] 'counsel-describe-variable
  [remap describe-key] 'helpful-key)

#+END_SRC

* File Browsing

** Treemacs Setup

*** Initial Setup

Use Treemacs as a kind of explorer like in vscode

#+BEGIN_SRC emacs-lisp

  (use-package treemacs)

#+END_SRC

*** Evil keybinds

#+BEGIN_SRC emacs-lisp

  (use-package treemacs-evil)

#+END_SRC

* Auto-Completion

** Initial Setup

Use company-mode for auto-completion

#+BEGIN_SRC emacs-lisp

  (use-package company
   :demand
   :config (global-company-mode)
   :general ("C-S-SPC" 'company-complete))

#+END_SRC

* Project Management

** Projectile

Use projectile for project management

#+BEGIN_SRC emacs-lisp

  (use-package projectile
   :demand
   :general ("C-c p" 'projectile-command-map)
   :init (when (file-directory-p "~/D/I")
	   (setq projectile-project-search-path '("~D/I")))
   :config (projectile-mode +1))

#+END_SRC

Use ripgrep for search

#+BEGIN_SRC emacs-lisp

  (use-package ripgrep :demand)

  (use-package projectile-ripgrep :after projectile ripgrep)

#+END_SRC

Counsel Support

#+BEGIN_SRC emacs-lisp

  (use-package counsel-projectile :after projectile :config (counsel-projectile-mode t))

#+END_SRC

Treemacs support

#+BEGIN_SRC emacs-lisp

  (use-package treemacs-projectile :after projectile)

#+END_SRC

** Project Management Keybinds

#+BEGIN_SRC emacs-lisp

  (personal/leader-key
    "p" 'projectile-command-map
    "ps" '(:ignore t :which-key "search"))

#+END_SRC

* Programming

** Parenthesis Configuration

*** Rainbow-Delimiters

Rainbow Delimiters alternates colours to better show the matched parens

#+BEGIN_SRC emacs-lisp

  (use-package rainbow-delimiters
   :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

*** Structural Editing

Use paredit to ensure that parens cannot be unmatched

#+BEGIN_SRC emacs-lisp

  (use-package paredit
   :hook (prog-mode . enable-paredit-mode))

#+END_SRC

** LSP Setup

Language Server Protocol setup (connects to a running external language server to provide helper functions)

*** Initial setup

#+BEGIN_SRC emacs-lisp

  (use-package lsp-mode
   :init (setq lsp-keymap-prefix "C-C l")
   :custom (lsp-lens-enable t)
   :hook (lsp-mode . lsp-enable-which-key-integration))

#+END_SRC

*** Ivy Support

#+BEGIN_SRC emacs-lisp

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

#+END_SRC

*** Treemacs Support

#+BEGIN_SRC emacs-lisp

  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

#+END_SRC

*** Debugger

#+BEGIN_SRC emacs-lisp

  (use-package dap-mode)

#+END_SRC

** Syntax Checking

*** Flycheck Setup

#+BEGIN_SRC emacs-lisp

  (use-package flycheck)

#+END_SRC

** Snippets

*** Yasnippet Setup

#+BEGIN_SRC emacs-lisp

  (use-package yasnippet
    :config (yas-global-mode 1))

#+END_SRC

*** ivy previews

Depends on dash

#+BEGIN_SRC emacs-lisp

  (use-package dash
    :after yasnippet)

  (use-package ivy-yasnippet
    :after yasnippet dash
    :config 'ivy-yasnippet)

#+END_SRC

** Clojure Support

*** Add Clojure-Mode

#+BEGIN_SRC emacs-lisp

  (use-package clojure-mode)

#+END_SRC

*** LSP Integration

#+BEGIN_SRC emacs-lisp

  (add-hook 'clojure-mode 'lsp)
  (add-hook 'clojurescript-mode 'lsp)
  (add-hook 'clojurec-mode 'lsp)

#+END_SRC

*** clj-refactor

#+BEGIN_SRC emacs-lisp

  (use-package clj-refactor
    :hook ((clojure-mode . clj-refactor-mode)
	   (clojurec-mode . clj-refactor-mode)
	   (clojurescript-mode . clj-refactor-mode))
   :config (cljr-add-keybindings-with-prefix "M-RET"))

#+END_SRC

*** yasnippet

#+BEGIN_SRC emacs-lisp

  (use-package clojure-snippets
    :after yasnippet clojure-mode)

#+END_SRC

*** Cider Setup

#+BEGIN_SRC emacs-lisp

  (use-package cider
    :commands (cider cider-connect cider-jack-in)
    :custom
    (cider-eval-toplevel-inside-comment-form t)
    (clojure-toplevel-inside-comment-form t))

#+END_SRC

*** Clojure Keybinds

#+BEGIN_SRC emacs-lisp

  (personal/leader-key
    "'" '(:ignore t :which-key "cider")
    "'j" '(:ignore t :which-key "jack-in")
    "'jj" 'cider-jack-in-clj
    "'js" 'cider-jack-in-cljs
    "'jc" 'cider-jack-in-clj&cljs

    "s" 'sesman-map

    "h" '(:ignore t :which-key "doc")
    "hd" 'cider-doc
    "hj" 'cider-javadoc
    "hc" 'cider-clojure-docs
    "ha" 'cider-apropos
    "hA" 'cider-apropos-documentation
    "hw" 'cider-clojuredocs-web
    "hn" 'cider-browse-ns

    "e" '(:ignore t :which-key "eval")
    "ee" 'cider-eval-defun-at-point
    "ef" 'cider-eval-last-sexp
    "eb" 'cider-eval-buffer
    "ec" 'cider-eval-commands-map)

  (general-def '(normal visual insert motion) "C-<return>" 'cider-eval-defun-at-point)

  (personal/refactor
   "a" '(:ignore t :which-key "add")
   "c" '(:ignore t :which-key "cycle")
   "d" '(:ignore t :which-key "destructure")
   "e" '(:ignore t :which-key "extract/expand")
   "f" '(:ignore t :which-key "function")
   "h" '(:ignore t :which-key "hydra/hotload")
   "i" '(:ignore t :which-key "introduce/inline")
   "m" '(:ignore t :which-key "move")
   "p" '(:ignore t :which-key "project/promote")
   "r" '(:ignore t :which-key "rename/remove")
   "s" '(:ignore t :which-key "sort/stop deps")
   "t" '(:ignore t :which-key "thread")
   "u" '(:ignore t :which-key "unwind"))

#+END_SRC

** Programming Keybinds

#+BEGIN_SRC emacs-lisp

  (personal/leader-key "i" 'ivy-yasnippet)

#+END_SRC

* Lame Shortcuts

A bunch of non-emacs or vim style shortcuts that are consistent with other software

#+BEGIN_SRC emacs-lisp

    (general-def '(motion normal insert visual)
     "C-z" 'undo
     "C-S-z" 'undo-redo
     "C-s" 'save-buffer
     "C-S-c" 'clipboard-kill-ring-save
     "C-S-v" 'clipboard-yank
     "C-S-x" 'clipboard-kill-region
     "C-<tab>" 'switch-to-buffer)

#+END_SRC
